//============================================
//
//	particle.cpp
//	Author: saito shian
//
//============================================

//============================================
// インクルード
//============================================
#include <assert.h>
#include "particle.h"
#include "application.h"
#include "renderer.h"
#include "player.h"
#include "input.h"
#include "camera.h"
#include "debug.h"

//============================================
// 静的メンバ変数宣言
//============================================
D3DXVECTOR3 CParticle::m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

//============================================
// パーティクルのコンストラクタ
//============================================
CParticle::CParticle()
{
	//============================================
	//メンバ変数のクリア
	//============================================
}

//============================================
// パーティクルのデストラクタ
//============================================
CParticle::~CParticle()
{
}
//============================================
// パーティクルの初期化処理
//============================================
HRESULT CParticle::Init(void)
{
	//============================================
	//メンバ変数の初期化
	//============================================
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);			//位置の初期化
	m_Life = 0;										//体力の初期化

	//オブジェクト基礎の初期化処理
	CObjectBase::Init();

	//パーティクルのテクスチャの設定
	SetTexture("data/TEXTURE/炎.png");

	return S_OK;
}

//============================================
// パーティクルの終了処理
//============================================
void CParticle::Uninit(void)
{
	//オブジェクト基礎の終了処理
	CObjectBase::Uninit();
}

//============================================
// パーティクルの更新処理
//============================================
void CParticle::Update(void)
{
	//オブジェクト基礎の更新処理
	CObjectBase::Update();
}

//============================================
// パーティクルの描画処理
//============================================
void CParticle::Draw(void)
{
	//オブジェクト基礎の描画処理
	CObjectBase::Draw();
}

//============================================
// パーティクルの生成
//============================================
CParticle * CParticle::Create()
{
	CParticle *pparticle = nullptr;

	//パーティクルの生成
	pparticle = new CParticle;				//パーティクルのインスタンス生成

	//nullチェック
	if (pparticle != nullptr)
	{
		//初期化処理
		pparticle->Init();
		pparticle->SetPosition(D3DXVECTOR3(0.0f,0.0f,0.0f));
	}
	else
	{
		assert(false);
	}
	return pparticle;
}